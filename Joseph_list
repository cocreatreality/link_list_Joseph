
class Child(object):
	def __init__(self, name = None, idNumber = None, age = None, sex = None, preChild = None, reChild = None):
		self.name = name
		self.idNumber = idNumber
		self.age = age
		self.sex = sex
		self.preChild = preChild
		self.reChild = reChild


class ChildrenLoop:
        def __init__(self):
                self.lenth = 0
                self.head = Child()
        def Insert(self, name, idNumber, age, sex):
                if self.lenth is 0:
                    self.head = Child(name, idNumber, age, sex, self.head, self.head)
                elif self.lenth is 1:
                    temp = Child(name, idNumber, age, sex, self.head, self.head)
                    self.head.preChild = temp
                    self.head.reChild = temp
                else:
                    temp = self.head
                    while temp.reChild is not self.head:
                        temp = temp.reChild
                    node = Child(name, idNumber, age, sex, temp, self.head)
                    temp.reChild = node
                    self.head.preChild = node
                self.lenth = self.lenth + 1
        def GetChild(self, idNumber):
                if self.lenth is 0:
                    print ("The loop is empty! \n")
                node = self.head
                count = 0
                while node.idNumber is not idNumber and count is not self.lenth:
                    node = node.reChild
                    count = count + 1
                if count is self.lenth:
                    print("There is no such child. \n")
                    return None
                else:
                    return node
        def ShowChild(self, node):
                print("Name: " + node.name + "\t" + "idNumber: " + node.idNumber + "\t" + "Age: " + node.age + "\t" + "Sex: " + node.sex + "\t" + "\n")
        def Delete(self, node):
                self.ShowChild(node)
                pre = node.preChild
                re = node.reChild
                node.reChild.preChild = node.preChild
                node.preChild.reChild = node.reChild
                self.lenth = self.lenth - 1
        def startGame(self, idNumber, method, step):
                node = self.GetChild(idNumber)
                count = 1
                if method is 3:
                    pre = re = node
                    while self.lenth is not 1 and self.lenth is not 2:
                        for i in range(step):
                            pre = pre.preChild
                            re = re.reChild
                        if pre.reChild is re.preChild:
                            node = pre.reChild
                            self.delete(node)
                        else:
                            self.Delete(pre.reChild)
                            self.Delete(re.preChild)
                    if self.lenth is 1:
                        print("剩下的同学是：\n")
                        self.ShowChild(pre)
                    elif self.lenth is 2:
                        print("剩下的同学是：\n")
                        self.ShowChild(pre)
                        self.ShowChild(pre.reChild)
                else:
                    while self.lenth is not 1:
                        if method is 1:
                            for i in range(step):
                                node = node.reChild
                            print("第", count, "个出列的同学是：\n")
                            self.Delete(node.preChild)
                            count = count + 1
                        elif method is 2:
                            for i in range(step):
                                node = node.preChild
                            print("第", count, "个出列的同学是：\n")
                            count = count + 1
                            self.Delete(node.reChild)
                    print ("剩下的同学是：\n")
                    self.ShowChild(node)

def main():
        Joseph = ChildrenLoop()
        Joseph.Insert("Tom", "001", "15", "m")
        Joseph.Insert("Tomy", "002", "15", "m")
        Joseph.Insert("Amy", "003", "14", "f")
        Joseph.startGame("001", 3, 2)

